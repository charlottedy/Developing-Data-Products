missClass(predictedVals,"response")
missClass(predictedVals,predictedVals)
missClass(testSA$chd,predictedVals)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit = glm(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,family="binomial")
predictedVals = predict(fit,newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predictedVals)
head(testSA)
predictedValsTrain = predict(fit,newdata=trainSA)
missClass(testSA$chd,predictedValsTest)
missClass(trainSA$chd,predictedValsTrain)
predictedValsTest = predict(fit,newdata=testSA)
missClass(testSA$chd,predictedValsTest)
predictedValsTest = predict(fit,newdata=testSA,type="response")
predictedValsTrain = predict(fit,newdata=trainSA,type="response")
missClass(testSA$chd,predictedValsTest)
missClass(trainSA$chd,predictedValsTrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
mod.Fit = train(y~.,data=vowel.train,method="rf")
varImp(mod.Fit)
mod.Fit = train(y~.,data=vowel.train,method="rf")
set.seed(33833)
mod.Fit = train(y~.,data=vowel.train,method="rf")
varImp(mod.Fit)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(rCharts)
require(rCharts)
require(devtools)
install.packages("devtools")
library(devtools)
install_github('ramnathv/rCharts')
library(rCharts)
library(datasets)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
??dTable
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
shinyServer(
function(input,output){
}
)
runApp()
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
install.packages("UsingR")
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
runApp()
setwd("~/Desktop/1509 - Youths/R Code")
data = read.csv("140101-150801 Aspirations.csv")
addAspGap = function(dat) {
n = nrow(dat)
gap = c()
for (i in 1:n) {
asp = dat$Q16[i]
per = dat$Q17[i]
if (asp<11 & per<11) {
gap[i] = asp - per
} else {
gap[i] = 100
}
}
dat$AspGap = gap
return(dat)
}
data = addAspGap(data)
addStu = function(dat) {
n = nrow(dat)
vec = rep(1,n)
for (i in 1:n) {
if (dat$S10[i]!=1 | is.na(dat$S10[i])) {vec[i]=0}
}
dat$Stu = vec
return(dat)
}
data = addStu(data)
addNS = function(dat) {
n = nrow(dat)
vec = rep(1,n)
for (i in 1:n) {
if (dat$D2[i]!=11 | is.na(dat$D2[i])) {vec[i]=0}
}
dat$NS = vec
return(dat)
}
data = addNS(data)
subsetAge = function(dat) {
datAge1 = subset(dat,dat$S6>=16 & dat$S6<=20)
datAge2 = subset(dat,dat$S6>=21 & dat$S6<=25)
datAge3 = subset(dat,dat$S6>=26 & dat$S6<=30)
datAge4 = subset(dat,dat$S6>=31 & dat$S6<=35)
listAge <- list(datAge1,datAge2,datAge3,datAge4)
return(listAge)
}
subsetR = function(dat) {
datR1 = subset(dat,dat$S8==1)  # Chinese
datR2 = subset(dat,dat$S8==2)  # Malay
datR3 = subset(dat,dat$S8==3)  # Indian
datR4 = subset(dat,dat$S8==4)  # Others
listR <- list(datR1,datR2,datR3,datR4)
return(listR)
}
subsetDT = function(dat) {
datDT1 = subset(dat,dat$S11==1)               # HDB 1-2R
datDT2 = subset(dat,dat$S11==2)               # HDB 3R
datDT3 = subset(dat,dat$S11==3)               # HDB 4R
datDT4 = subset(dat,dat$S11==4 | dat$S11==5)  # HDB 5R+
datDT5 = subset(dat,dat$S11==6)               # Condo
datDT6 = subset(dat,dat$S11==7)               # Landed
listDT <- list(datDT1,datDT2,datDT3,datDT4,datDT5,datDT6)
return(listDT)
}
subsetEL = function(dat) {
datStu = subset(dat,dat$S10==1)
datNotStu = subset(dat,dat$S10!=1 | is.na(dat$S10))
datEL2Stu = subset(datStu,datStu$D1a==7) # Sec
datEL3Stu = subset(datStu,datStu$D1a==5 | datStu$D1a==6) # JC
datEL4Stu = subset(datStu,datStu$D1a==4) # ITE
datEL5Stu = subset(datStu,datStu$D1a==3) # Poly
datEL6Stu = subset(datStu,datStu$D1a==1 | datStu$D1a==2) # Degree
datEL1 = subset(datNotStu,datNotStu$D1==6 | datNotStu$D1==7) # Below Sec
datEL2 = subset(datNotStu,datNotStu$D1==5) # Sec
datEL3 = subset(datNotStu,datNotStu$D1==4 & (datNotStu$D2!=11 | is.na(datNotStu$D2))) # JC (excl NSmen)
datEL4 = subset(datNotStu,datNotStu$D1==3) # ITE
datEL5 = subset(datNotStu,datNotStu$D1==2) # Poly
datEL6 = subset(datNotStu,datNotStu$D1==1) # Degree
listEL <- list(datEL2Stu,datEL3Stu,datEL4Stu,datEL5Stu,datEL6Stu,
datEL1,datEL2,datEL3,datEL4,datEL5,datEL6)
return(listEL)
}
subsetG = function(dat) {
datG1 = subset(dat,dat$S5==1)  # Male
datG2 = subset(dat,dat$S5==2)  # Female
listG <- list(datG1,datG2)
return(listG)
}
subsetMS = function(dat) {
datMS1 = subset(dat,dat$D6==1)  # Single
datMS2 = subset(dat,dat$D6==3)  # Married without children
datMS3 = subset(dat,dat$D6==4)  # Married with children
datMS4 = subset(dat,dat$D6==2)  # D/W/S without children
datMS5 = subset(dat,dat$D6==5)  # D/W/S with children
listMS <- list(datMS1,datMS2,datMS3,datMS4,datMS5)
return(listMS)
}
subsetES = function(dat) {
datES1 = subset(dat,dat$S9==1)  # Full-timer
datES2 = subset(dat,dat$S9==2)  # Part-timer
datES3 = subset(dat,dat$S9==3)  # Job-seeker
datES4 = subset(dat,dat$S9==4)  # Economically inactive
listES <- list(datES1,datES2,datES3,datES4)
return(listES)
}
subsetO = function(dat) {
datO1 = subset(dat,dat$D2==1)
datO2 = subset(dat,dat$D2==2)
datO3 = subset(dat,dat$D2==3)
datO4 = subset(dat,dat$D2==4)
datO5 = subset(dat,dat$D2==5)
datO6 = subset(dat,dat$D2==6)
datO7 = subset(dat,dat$D2==8)
datO8 = subset(dat,dat$D2==9)
datO9 = subset(dat,dat$D2==10)
datO10 = subset(dat,dat$D2==11)
listO <- list(datO1,datO2,datO3,datO4,datO5,datO6,datO7,datO8,datO9,datO10)
return(listO)
}
subsetPI = function(dat) {
datPI1 = subset(dat,dat$D4>=1 & dat$D4<=2)
datPI2 = subset(dat,dat$D4==3)
datPI3 = subset(dat,dat$D4==4)
datPI4 = subset(dat,dat$D4==5)
datPI5 = subset(dat,dat$D4==6)
datPI6 = subset(dat,dat$D4==7)
datPI7 = subset(dat,dat$D4>=8 & dat$D4<=9)
datPI8 = subset(dat,dat$D4>=10 & dat$D4<=13)
listPI <- list(datPI1,datPI2,datPI3,datPI4,datPI5,datPI6,datPI7,datPI8)
return(listPI)
}
getAspGap = function(dat) {
asp = round(mean(dat$Q16[dat$Q16<11]),2)
per = round(mean(dat$Q17[dat$Q17<11]),2)
gap = round(mean(dat$AspGap[dat$AspGap<11]),2)
pct = round(100*gap/asp,1)
collate = c(asp,per,gap,pct)
return(collate)
}
# list1 is the row heading, attribute is the col heading
n2way = function(list1=listAG,attribute="G") {
n1 = length(list1)
ntable = c()
for (i in 1:n1) {
sub = list1[[i]]
if (attribute == "G") {
n = c(nrow(subset(sub,sub$S5==1)),nrow(subset(sub,sub$S5==2)))
} else if (attribute == "Age") {
n = c(nrow(subset(sub,sub$S6>=16 & sub$S6<=20)),
nrow(subset(sub,sub$S6>=21 & sub$S6<=25)),
nrow(subset(sub,sub$S6>=26 & sub$S6<=30)),
nrow(subset(sub,sub$S6>=31 & sub$S6<=35)))
} else if (attribute == "R") {
n = c(nrow(subset(sub,sub$S8==1)),nrow(subset(sub,sub$S8==2)),
nrow(subset(sub,sub$S8==3)),nrow(subset(sub,sub$S8==4)))
} else if (attribute == "DT") {
n = c(nrow(subset(sub,sub$S11==1)),nrow(subset(sub,sub$S11==2)),
nrow(subset(sub,sub$S11==3)),nrow(subset(sub,sub$S11==4 | sub$S11==5)),
nrow(subset(sub,sub$S11==6)),nrow(subset(sub,sub$S11==7)))
} else if (attribute == "EL") {
datStu = subset(sub,sub$S10==1)
datNotStu = subset(sub,sub$S10!=1 | is.na(sub$S10))
n = c(nrow(subset(datStu,datStu$D1a==7)),
nrow(subset(datStu,datStu$D1a==5 | datStu$D1a==6)),
nrow(subset(datStu,datStu$D1a==4)),
nrow(subset(datStu,datStu$D1a==3)),
nrow(subset(datStu,datStu$D1a==1 | datStu$D1a==2)),
nrow(subset(datNotStu,datNotStu$D1==6 | datNotStu$D1==7)),
nrow(subset(datNotStu,datNotStu$D1==5)),
nrow(subset(datNotStu,datNotStu$D1==4 & (datNotStu$D2!=11 | is.na(datNotStu$D2)))),
nrow(subset(datNotStu,datNotStu$D1==3)),
nrow(subset(datNotStu,datNotStu$D1==2)),
nrow(subset(datNotStu,datNotStu$D1==1)))
} else if (attribute == "MS") {
n = c(nrow(subset(sub,sub$D6==1)),nrow(subset(sub,sub$D6==3)),
nrow(subset(sub,sub$D6==4)),nrow(subset(sub,sub$D6==2)),
nrow(subset(sub,sub$D6==5)))
} else if (attribute == "ES") {
n = c(nrow(subset(sub,sub$S9==1)),nrow(subset(sub,sub$S9==2)),
nrow(subset(sub,sub$S9==3)),nrow(subset(sub,sub$S9==4)))
} else if (attribute == "O") {
n = c(nrow(subset(sub,sub$D2==1)),nrow(subset(sub,sub$D2==2)),
nrow(subset(sub,sub$D2==3)),nrow(subset(sub,sub$D2==4)),
nrow(subset(sub,sub$D2==5)),nrow(subset(sub,sub$D2==6)),
nrow(subset(sub,sub$D2==8)),nrow(subset(sub,sub$D2==9)),
nrow(subset(sub,sub$D2==10)),nrow(subset(sub,sub$D2==11)))
} else if (attribute == "PI") {
n = c(nrow(subset(sub,sub$D4>=1 & sub$D4<=2)),
nrow(subset(sub,sub$D4==3)),nrow(subset(sub,sub$D4==4)),
nrow(subset(sub,sub$D4==5)),nrow(subset(sub,sub$D4==6)),
nrow(subset(sub,sub$D4==7)),
nrow(subset(sub,sub$D4>=8 & sub$D4<=9)),
nrow(subset(sub,sub$D4>=10 & sub$D4<=13)))
}
ntable = rbind(ntable,n)
}
return(ntable)
}
# list1 is the row heading, attribute is the col heading
aspGap2way = function(list1=listAG,attribute="G") {
n1 = length(list1)
ntable = c()
for (i in 1:n1) {
sub = list1[[i]]
if (attribute == "G") {
n = c(getAspGap(subset(sub,sub$S5==1)),getAspGap(subset(sub,sub$S5==2)))
} else if (attribute == "Age") {
n = c(getAspGap(subset(sub,sub$S6>=16 & sub$S6<=20)),
getAspGap(subset(sub,sub$S6>=21 & sub$S6<=25)),
getAspGap(subset(sub,sub$S6>=26 & sub$S6<=30)),
getAspGap(subset(sub,sub$S6>=31 & sub$S6<=35)))
} else if (attribute == "R") {
n = c(getAspGap(subset(sub,sub$S8==1)),getAspGap(subset(sub,sub$S8==2)),
getAspGap(subset(sub,sub$S8==3)),getAspGap(subset(sub,sub$S8==4)))
} else if (attribute == "DT") {
n = c(getAspGap(subset(sub,sub$S11==1)),getAspGap(subset(sub,sub$S11==2)),
getAspGap(subset(sub,sub$S11==3)),getAspGap(subset(sub,sub$S11==4 | sub$S11==5)),
getAspGap(subset(sub,sub$S11==6)),getAspGap(subset(sub,sub$S11==7)))
} else if (attribute == "EL") {
datStu = subset(sub,sub$S10==1)
datNotStu = subset(sub,sub$S10!=1 | is.na(sub$S10))
n = c(getAspGap(subset(datStu,datStu$D1a==7)),
getAspGap(subset(datStu,datStu$D1a==5 | datStu$D1a==6)),
getAspGap(subset(datStu,datStu$D1a==4)),
getAspGap(subset(datStu,datStu$D1a==3)),
getAspGap(subset(datStu,datStu$D1a==1 | datStu$D1a==2)),
getAspGap(subset(datNotStu,datNotStu$D1==6 | datNotStu$D1==7)),
getAspGap(subset(datNotStu,datNotStu$D1==5)),
getAspGap(subset(datNotStu,datNotStu$D1==4 & (datNotStu$D2!=11 | is.na(datNotStu$D2)))),
getAspGap(subset(datNotStu,datNotStu$D1==3)),
getAspGap(subset(datNotStu,datNotStu$D1==2)),
getAspGap(subset(datNotStu,datNotStu$D1==1)))
} else if (attribute == "MS") {
n = c(getAspGap(subset(sub,sub$D6==1)),getAspGap(subset(sub,sub$D6==3)),
getAspGap(subset(sub,sub$D6==4)),getAspGap(subset(sub,sub$D6==2)),
getAspGap(subset(sub,sub$D6==5)))
} else if (attribute == "ES") {
n = c(getAspGap(subset(sub,sub$S9==1)),getAspGap(subset(sub,sub$S9==2)),
getAspGap(subset(sub,sub$S9==3)),getAspGap(subset(sub,sub$S9==4)))
} else if (attribute == "O") {
n = c(getAspGap(subset(sub,sub$D2==1)),getAspGap(subset(sub,sub$D2==2)),
getAspGap(subset(sub,sub$D2==3)),getAspGap(subset(sub,sub$D2==4)),
getAspGap(subset(sub,sub$D2==5)),getAspGap(subset(sub,sub$D2==6)),
getAspGap(subset(sub,sub$D2==8)),getAspGap(subset(sub,sub$D2==9)),
getAspGap(subset(sub,sub$D2==10)),getAspGap(subset(sub,sub$D2==11)))
} else if (attribute == "PI") {
n = c(getAspGap(subset(sub,sub$D4>=1 & sub$D4<=2)),
getAspGap(subset(sub,sub$D4==3)),getAspGap(subset(sub,sub$D4==4)),
getAspGap(subset(sub,sub$D4==5)),getAspGap(subset(sub,sub$D4==6)),
getAspGap(subset(sub,sub$D4==7)),
getAspGap(subset(sub,sub$D4>=8 & sub$D4<=9)),
getAspGap(subset(sub,sub$D4>=10 & sub$D4<=13)))
}
ntable = rbind(ntable,n)
}
return(ntable)
}
# list1 is the row heading, attribute is the col heading
mean2wayAspGap = function(list1=listAG,attribute="G") {
n1 = length(list1)
meantable = c()
for (i in 1:n1) {
sub = list1[[i]]
if (attribute == "G") {
sub1=subset(sub,sub$S5==1)
sub2=subset(sub,sub$S5==2)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]))
} else if (attribute == "R") {
sub1=subset(sub,sub$S8==1)
sub2=subset(sub,sub$S8==2)
sub3=subset(sub,sub$S8==3)
sub4=subset(sub,sub$S8==4)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]))
} else if (attribute == "Age") {
sub1=subset(sub,sub$S6>=16 & sub$S6<=20)
sub2=subset(sub,sub$S6>=21 & sub$S6<=25)
sub3=subset(sub,sub$S6>=26 & sub$S6<=30)
sub4=subset(sub,sub$S6>=16 & sub$S6<=20)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]))
} else if (attribute == "DT") {
sub1=subset(sub,sub$S11==1)
sub2=subset(sub,sub$S11==2)
sub3=subset(sub,sub$S11==3)
sub4=subset(sub,sub$S11==4 | sub$S11==5)
sub5=subset(sub,sub$S11==6)
sub6=subset(sub,sub$S11==7)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]),
mean(sub5$AspGap[sub5$AspGap<11]),mean(sub6$AspGap[sub6$AspGap<11]))
} else if (attribute == "EL") {
datStu = subset(sub,sub$S10==1)
datNotStu = subset(sub,sub$S10!=1 | is.na(sub$S10))
sub1 = subset(datStu,datStu$D1a==7) # Sec
sub2 = subset(datStu,datStu$D1a==5 | datStu$D1a==6) # JC
sub3 = subset(datStu,datStu$D1a==4) # ITE
sub4 = subset(datStu,datStu$D1a==3) # Poly
sub5 = subset(datStu,datStu$D1a==1 | datStu$D1a==2) # Degree
sub6 = subset(datNotStu,datNotStu$D1==6 | datNotStu$D1==7) # Below Sec
sub7 = subset(datNotStu,datNotStu$D1==5) # Sec
sub8 = subset(datNotStu,datNotStu$D1==4 & (datNotStu$D2!=11 | is.na(datNotStu$D2))) # JC (excl NSmen)
sub9 = subset(datNotStu,datNotStu$D1==3) # ITE
sub10 = subset(datNotStu,datNotStu$D1==2) # Poly
sub11 = subset(datNotStu,datNotStu$D1==1) # Degree
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]),
mean(sub5$AspGap[sub5$AspGap<11]),mean(sub6$AspGap[sub6$AspGap<11]),
mean(sub7$AspGap[sub7$AspGap<11]),mean(sub8$AspGap[sub8$AspGap<11]),
mean(sub9$AspGap[sub9$AspGap<11]),mean(sub10$AspGap[sub10$AspGap<11]),
mean(sub11$AspGap[sub11$AspGap<11]))
} else if (attribute == "MS") {
sub1=subset(sub,sub$D6==1)
sub2=subset(sub,sub$D6==3)
sub3=subset(sub,sub$D6==4)
sub4=subset(sub,sub$D6==2)
sub5=subset(sub,sub$D6==5)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]),
mean(sub5$AspGap[sub5$AspGap<11]))
} else if (attribute == "ES") {
sub1=subset(sub,sub$S9==1)
sub2=subset(sub,sub$S9==2)
sub3=subset(sub,sub$S9==3)
sub4=subset(sub,sub$S9==4)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]))
} else if (attribute == "O") {
sub1=subset(sub,sub$D2==1)
sub2=subset(sub,sub$D2==2)
sub3=subset(sub,sub$D2==3)
sub4=subset(sub,sub$D2==4)
sub5=subset(sub,sub$D2==5)
sub6=subset(sub,sub$D2==6)
sub7=subset(sub,sub$D2==8)
sub8=subset(sub,sub$D2==9)
sub9=subset(sub,sub$D2==10)
sub10=subset(sub,sub$D2==11)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]),
mean(sub5$AspGap[sub5$AspGap<11]),mean(sub6$AspGap[sub6$AspGap<11]),
mean(sub7$AspGap[sub7$AspGap<11]),mean(sub8$AspGap[sub8$AspGap<11]),
mean(sub9$AspGap[sub9$AspGap<11]),mean(sub10$AspGap[sub10$AspGap<11]))
} else if (attribute == "PI") {
sub1=subset(sub,sub$D4>=1 & sub$D4<=2)
sub2=subset(sub,sub$D4==3)
sub3=subset(sub,sub$D4==4)
sub4=subset(sub,sub$D4==5)
sub5=subset(sub,sub$D4==6)
sub6=subset(sub,sub$D4==7)
sub7=subset(sub,sub$D4>=8 & sub$D4<=9)
sub8=subset(sub,sub$D4>=10 & sub$D4<=13)
mean=c(mean(sub1$AspGap[sub1$AspGap<11]),mean(sub2$AspGap[sub2$AspGap<11]),
mean(sub3$AspGap[sub3$AspGap<11]),mean(sub4$AspGap[sub4$AspGap<11]),
mean(sub5$AspGap[sub5$AspGap<11]),mean(sub6$AspGap[sub6$AspGap<11]),
mean(sub7$AspGap[sub7$AspGap<11]),mean(sub8$AspGap[sub8$AspGap<11]))
}
meantable = rbind(meantable,mean)
}
return(round(meantable,2))
}
listAge = subsetAge(data)
sum(sapply(listAge,nrow))
data = subset(data$S2!=3)
data = subset(data,data$S2!=3)
listAge = subsetAge(data)
listG = subsetG(data)
listR = subsetR(data)
listDT = subsetDT(data)
listMS = subsetMS(data)
listEL = subsetEL(data)
listES = subsetES(data)
listO = subsetO(data)
listPI = subsetPI(data)
sum(sapply(listAge,nrow))
rbind(t(n2way(listAge,"G")),t(n2way(listAge,"R")),t(n2way(listAge,"DT")),
t(n2way(listAge,"MS")),t(n2way(listAge,"EL")),t(n2way(listAge,"ES")),
t(n2way(listAge,"O")),t(n2way(listAge,"PI")))
rbind(aspGap2way(listG,"Age"),aspGap2way(listR,"Age"),aspGap2way(listDT,"Age"),
aspGap2way(listMS,"Age"),aspGap2way(listEL,"Age"),aspGap2way(listES,"Age"),
aspGap2way(listO,"Age"),aspGap2way(listPI,"Age"))
rbind(aspGap2way(listG,"Age"),aspGap2way(listR,"Age"),aspGap2way(listDT,"Age"),
aspGap2way(listMS,"Age"),aspGap2way(listEL,"Age"),aspGap2way(listES,"Age"),
aspGap2way(listO,"Age"),aspGap2way(listPI,"Age"))
setwd("~/Desktop/Dropbox/DataScience/09developingDataProducts/Assignments/Project")
runApp()
library(shiny)
runApp()
